#!/usr/bin/env bash
# GitHub Actions vs AWS CodeBuild ÊØîËºÉ„Çπ„ÇØ„É™„Éó„Éà

set -e

# Áí∞Â¢ÉÂ§âÊï∞„ÅÆË™≠„ÅøËæº„Åø
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$(dirname "$(dirname "$SCRIPT_DIR")")/scripts/env-config.sh"

echo -e "\e[36m=== CI/CD Pipeline Comparison Dashboard ===\e[0m"
echo ""

# GitHub Actions „ÅÆÂÆüË°åÁä∂Ê≥Å (GitHub CLI „ÅåÂøÖË¶Å)
echo -e "\e[33müìä GitHub Actions Status:\e[0m"
if command -v gh > /dev/null; then
    echo "Recent workflow runs:"
    gh run list --limit 5 --json status,conclusion,createdAt,displayTitle,url || echo "GitHub CLI authentication required"
else
    echo "GitHub CLI not installed. Install with: https://cli.github.com/"
fi

echo ""

# AWS CodeBuild „ÅÆÂÆüË°åÁä∂Ê≥Å
echo -e "\e[33müèóÔ∏è AWS CodeBuild Status:\e[0m"
if aws codebuild list-builds-for-project --project-name "${PROJECT_NAME}-build" --sort-order DESCENDING --max-items 5 > /dev/null 2>&1; then
    echo "Recent builds:"
    aws codebuild list-builds-for-project \
        --project-name "${PROJECT_NAME}-build" \
        --sort-order DESCENDING \
        --max-items 5 \
        --query 'ids' --output table
else
    echo "No CodeBuild history found or project doesn't exist"
fi

echo ""

# S3 „Ç¢„Éº„ÉÜ„Ç£„Éï„Ç°„ÇØ„Éà„ÅÆÊØîËºÉ
echo -e "\e[33müì¶ Build Artifacts Comparison:\e[0m"
echo ""

echo "GitHub Actions builds:"
aws s3 ls "s3://${S3_BUCKET_NAME}/github-builds/" --human-readable 2>/dev/null | head -10 || echo "No GitHub Actions builds found"

echo ""

echo "AWS CodeBuild builds:"
aws s3 ls "s3://${S3_BUCKET_NAME}/" --human-readable 2>/dev/null | grep -v "github-builds/" | head -10 || echo "No CodeBuild artifacts found"

echo ""

# CodeDeploy „Éá„Éó„É≠„Ç§„É°„É≥„ÉàÂ±•Ê≠¥
echo -e "\e[33müöÄ Recent Deployments:\e[0m"
aws deploy list-deployments \
    --application-name "${PROJECT_NAME}-app" \
    --max-items 10 \
    --query 'deployments' --output table 2>/dev/null || echo "No deployment history found"

echo ""

# EC2 „Ç§„É≥„Çπ„Çø„É≥„ÇπÁä∂Ê≥Å
echo -e "\e[33müñ•Ô∏è Target EC2 Instance Status:\e[0m"
EC2_INFO=$(aws ec2 describe-instances \
    --filters "Name=tag:$EC2_TAG_KEY,Values=$EC2_TAG_VALUE" \
    --query 'Reservations[*].Instances[*].[InstanceId,PublicIpAddress,State.Name,LaunchTime]' \
    --output table 2>/dev/null)

if [ -n "$EC2_INFO" ]; then
    echo "$EC2_INFO"
    
    # Application health check
    PUBLIC_IP=$(aws ec2 describe-instances \
        --filters "Name=tag:$EC2_TAG_KEY,Values=$EC2_TAG_VALUE" "Name=instance-state-name,Values=running" \
        --query 'Reservations[0].Instances[0].PublicIpAddress' --output text 2>/dev/null)
    
    if [ "$PUBLIC_IP" != "None" ] && [ -n "$PUBLIC_IP" ]; then
        echo ""
        echo "Application health check:"
        if curl -f -s "http://$PUBLIC_IP:3000/health" > /dev/null; then
            echo -e "‚úÖ Application is \e[32mhealthy\e[0m at http://$PUBLIC_IP:3000"
            curl -s "http://$PUBLIC_IP:3000/health" | jq '.status, .uptime' 2>/dev/null || echo "Health endpoint accessible"
        else
            echo -e "‚ùå Application \e[31mnot responding\e[0m at http://$PUBLIC_IP:3000"
        fi
    fi
else
    echo "No EC2 instances found with tag $EC2_TAG_KEY=$EC2_TAG_VALUE"
fi

echo ""

# „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊØîËºÉ„ÉÜ„Éº„Éñ„É´
echo -e "\e[33m‚ö° Performance Comparison:\e[0m"
cat << 'EOF'
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Metric              ‚îÇ GitHub Actions   ‚îÇ AWS CodeBuild      ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Setup Time          ‚îÇ ~30s             ‚îÇ ~45s               ‚îÇ
‚îÇ Build Environment   ‚îÇ Ubuntu Latest    ‚îÇ Amazon Linux 2     ‚îÇ
‚îÇ Node.js Version     ‚îÇ 18 (configurable)‚îÇ 18 (buildspec)     ‚îÇ
‚îÇ Parallel Jobs       ‚îÇ Multiple runners ‚îÇ Single build       ‚îÇ
‚îÇ Cost (Free Tier)    ‚îÇ 2000 min/month   ‚îÇ 100 min/month      ‚îÇ
‚îÇ Artifact Storage    ‚îÇ GitHub + S3      ‚îÇ S3 only            ‚îÇ
‚îÇ Integration         ‚îÇ GitHub native    ‚îÇ AWS native         ‚îÇ
‚îÇ Custom Actions      ‚îÇ Marketplace      ‚îÇ Custom containers  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
EOF

echo ""

# ‰ΩøÁî®Áµ±Ë®à„ÅÆÊ¶ÇË¶Å
echo -e "\e[33müìà Usage Statistics:\e[0m"
echo "S3 Bucket size:"
aws s3 ls "s3://${S3_BUCKET_NAME}" --recursive --human-readable --summarize 2>/dev/null | tail -2 || echo "Unable to get S3 statistics"

echo ""
echo -e "\e[32m‚ú® Comparison completed!\e[0m"
echo ""
echo "üîó Useful links:"
echo "   ‚Ä¢ GitHub Actions: https://github.com/Sotm-IT/aws-cicd-demo/actions"
echo "   ‚Ä¢ AWS CodeBuild: https://console.aws.amazon.com/codesuite/codebuild/projects"
echo "   ‚Ä¢ AWS CodeDeploy: https://console.aws.amazon.com/codesuite/codedeploy/applications"
echo "   ‚Ä¢ Application: http://$PUBLIC_IP:3000 (if available)"
