name: AWS CI/CD via GitHub Actions

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 手動実行を可能にする

env:
  AWS_REGION: ap-northeast-1
  PROJECT_NAME: aws-cicd-demo

jobs:
  trigger-codebuild:
    name: Trigger AWS CodeBuild
    runs-on: ubuntu-latest
    outputs:
      build-id: ${{ steps.start-build.outputs.build-id }}
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Start CodeBuild
      id: start-build
      run: |
        echo "Starting AWS CodeBuild project: ${{ env.PROJECT_NAME }}-build"
        
        # CodeBuildプロジェクトを開始
        BUILD_ID=$(aws codebuild start-build \
          --project-name "${{ env.PROJECT_NAME }}-build" \
          --query 'build.id' \
          --output text)
        
        echo "build-id=${BUILD_ID}" >> $GITHUB_OUTPUT
        echo "✅ CodeBuild started with ID: ${BUILD_ID}"

  wait-for-build:
    name: Wait for CodeBuild Completion
    needs: trigger-codebuild
    runs-on: ubuntu-latest
    outputs:
      build-status: ${{ steps.wait-build.outputs.build-status }}
      latest-artifact: ${{ steps.wait-build.outputs.latest-artifact }}
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Wait for build completion
      id: wait-build
      run: |
        BUILD_ID="${{ needs.trigger-codebuild.outputs.build-id }}"
        echo "Waiting for build completion: ${BUILD_ID}"
        
        # ビルドの完了を待機（最大30分）
        TIMEOUT=1800  # 30分
        ELAPSED=0
        INTERVAL=30   # 30秒間隔でチェック
        
        while [ $ELAPSED -lt $TIMEOUT ]; do
          BUILD_STATUS=$(aws codebuild batch-get-builds \
            --ids "${BUILD_ID}" \
            --query 'builds[0].buildStatus' \
            --output text)
          
          echo "Build status: ${BUILD_STATUS} (${ELAPSED}s elapsed)"
          
          case "${BUILD_STATUS}" in
            "SUCCEEDED")
              echo "✅ Build completed successfully!"
              echo "build-status=SUCCEEDED" >> $GITHUB_OUTPUT
              
              # 最新のアーティファクトを取得
              ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
              S3_BUCKET="${PROJECT_NAME}-codebuild-bucket-${ACCOUNT_ID}"
              
              LATEST_ARTIFACT=$(aws s3api list-objects-v2 \
                --bucket "${S3_BUCKET}" \
                --query 'sort_by(Contents, &LastModified)[-1].Key' \
                --output text)
              
              echo "latest-artifact=${LATEST_ARTIFACT}" >> $GITHUB_OUTPUT
              echo "Latest artifact: ${LATEST_ARTIFACT}"
              exit 0
              ;;
            "FAILED"|"FAULT"|"STOPPED"|"TIMED_OUT")
              echo "❌ Build failed with status: ${BUILD_STATUS}"
              echo "build-status=${BUILD_STATUS}" >> $GITHUB_OUTPUT
              exit 1
              ;;
            "IN_PROGRESS")
              echo "⏳ Build in progress..."
              ;;
            *)
              echo "⚠️ Unknown build status: ${BUILD_STATUS}"
              ;;
          esac
          
          sleep $INTERVAL
          ELAPSED=$((ELAPSED + INTERVAL))
        done
        
        echo "❌ Build timed out after ${TIMEOUT} seconds"
        echo "build-status=TIMEOUT" >> $GITHUB_OUTPUT
        exit 1

  trigger-deploy:
    name: Trigger AWS CodeDeploy
    needs: [trigger-codebuild, wait-for-build]
    runs-on: ubuntu-latest
    if: needs.wait-for-build.outputs.build-status == 'SUCCEEDED' && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    outputs:
      deployment-id: ${{ steps.start-deploy.outputs.deployment-id }}
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Start CodeDeploy
      id: start-deploy
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        S3_BUCKET="${PROJECT_NAME}-codebuild-bucket-${ACCOUNT_ID}"
        LATEST_ARTIFACT="${{ needs.wait-for-build.outputs.latest-artifact }}"
        
        echo "Starting AWS CodeDeploy..."
        echo "Application: ${{ env.PROJECT_NAME }}-app"
        echo "Deployment Group: ${{ env.PROJECT_NAME }}-deployment-group"
        echo "Artifact: s3://${S3_BUCKET}/${LATEST_ARTIFACT}"
        
        # CodeDeployでデプロイを開始
        DEPLOYMENT_ID=$(aws deploy create-deployment \
          --application-name "${{ env.PROJECT_NAME }}-app" \
          --deployment-group-name "${{ env.PROJECT_NAME }}-deployment-group" \
          --s3-location bucket="${S3_BUCKET}",key="${LATEST_ARTIFACT}",bundleType=zip \
          --description "GitHub Actions triggered deployment from commit ${{ github.sha }}" \
          --query 'deploymentId' \
          --output text)
        
        echo "deployment-id=${DEPLOYMENT_ID}" >> $GITHUB_OUTPUT
        echo "✅ CodeDeploy started with ID: ${DEPLOYMENT_ID}"

  wait-for-deploy:
    name: Wait for CodeDeploy Completion
    needs: [trigger-deploy]
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Wait for deployment completion
      run: |
        DEPLOYMENT_ID="${{ needs.trigger-deploy.outputs.deployment-id }}"
        echo "Waiting for deployment completion: ${DEPLOYMENT_ID}"
        
        # デプロイメントの完了を待機
        aws deploy wait deployment-successful --deployment-id "${DEPLOYMENT_ID}"
        
        echo "✅ Deployment completed successfully!"
        
        # デプロイメント詳細を表示
        aws deploy get-deployment --deployment-id "${DEPLOYMENT_ID}" \
          --query 'deploymentInfo.[status,description,completeTime]' --output table

  verify-deployment:
    name: Verify Deployment
    needs: [wait-for-deploy]
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get EC2 instance info and health check
      run: |
        # EC2インスタンスのパブリックIPを取得
        PUBLIC_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Environment,Values=Development" "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        
        echo "EC2 Instance Public IP: ${PUBLIC_IP}"
        
        if [ "${PUBLIC_IP}" != "None" ] && [ -n "${PUBLIC_IP}" ]; then
          echo "Performing health check on http://${PUBLIC_IP}:3000/health"
          
          # アプリケーションの起動を待機
          sleep 15
          
          # ヘルスチェック（リトライ付き）
          for i in {1..5}; do
            echo "Health check attempt ${i}/5..."
            if curl -f -s "http://${PUBLIC_IP}:3000/health" > /dev/null; then
              echo "✅ Health check passed!"
              
              # 詳細な健康状態を表示
              echo "Application health status:"
              curl -s "http://${PUBLIC_IP}:3000/health" | jq '.' || curl -s "http://${PUBLIC_IP}:3000/health"
              
              echo ""
              echo "🎉 GitHub Actions → CodeBuild → CodeDeploy pipeline completed successfully!"
              echo "🌐 Application URL: http://${PUBLIC_IP}:3000"
              break
            else
              echo "⚠️ Health check failed, retrying in 10 seconds..."
              sleep 10
            fi
            
            if [ $i -eq 5 ]; then
              echo "❌ Health check failed after 5 attempts"
              exit 1
            fi
          done
        else
          echo "❌ Could not retrieve EC2 instance IP"
          exit 1
        fi
