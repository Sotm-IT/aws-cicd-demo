name: AWS CI/CD with GitHub Actions

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # ÊâãÂãïÂÆüË°å„ÇíÂèØËÉΩ„Å´„Åô„Çã

env:
  AWS_REGION: ap-northeast-1
  PROJECT_NAME: aws-cicd-demo
  NODE_VERSION: '18'

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
      artifact-path: ${{ steps.build.outputs.artifact-path }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        echo "Installing dependencies..."
        npm ci --only=production
    
    - name: Run tests
      run: |
        echo "Running tests..."
        npm test || echo "No tests specified - continuing build"
    
    - name: Run linting
      run: |
        echo "Running linting..."
        npm run lint || echo "No linting configured - continuing build"
    
    - name: Build application artifact
      id: build
      run: |
        echo "Creating deployment artifact..."
        
        # Create build timestamp
        BUILD_TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        ARTIFACT_NAME="aws-cicd-demo-github-${{ github.run_number }}-${BUILD_TIMESTAMP}.zip"
        
        # Create artifact directory
        mkdir -p dist
        
        # Copy necessary files for deployment
        cp app.js dist/
        cp package.json dist/
        cp package-lock.json dist/
        cp appspec.yml dist/
        cp -r scripts/deploy dist/scripts/
        
        # Create ZIP artifact
        cd dist
        zip -r "../${ARTIFACT_NAME}" .
        cd ..
        
        # Verify artifact
        ls -la "${ARTIFACT_NAME}"
        unzip -l "${ARTIFACT_NAME}"
        
        # Set outputs
        echo "artifact-name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
        echo "artifact-path=${GITHUB_WORKSPACE}/${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
        
        echo "Build artifact created: ${ARTIFACT_NAME}"
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact-${{ github.run_number }}
        path: ${{ steps.build.outputs.artifact-path }}
        retention-days: 30

  upload-to-s3:
    name: Upload to S3
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: build-artifact-${{ github.run_number }}
        path: ./artifacts
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Upload to S3
      run: |
        # Get AWS Account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        S3_BUCKET="${PROJECT_NAME}-codebuild-bucket-${ACCOUNT_ID}"
        
        echo "Uploading to S3 bucket: ${S3_BUCKET}"
        
        # Upload to S3 with GitHub Actions specific prefix
        aws s3 cp "./artifacts/${{ needs.build.outputs.artifact-name }}" \
          "s3://${S3_BUCKET}/github-builds/${{ needs.build.outputs.artifact-name }}"
        
        echo "‚úÖ Upload completed: s3://${S3_BUCKET}/github-builds/${{ needs.build.outputs.artifact-name }}"
        
        # Verify upload
        aws s3 ls "s3://${S3_BUCKET}/github-builds/" --human-readable

  deploy:
    name: Deploy to AWS
    needs: [build, upload-to-s3]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to CodeDeploy
      id: deploy
      run: |
        # Get AWS Account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        S3_BUCKET="${PROJECT_NAME}-codebuild-bucket-${ACCOUNT_ID}"
        
        echo "Starting CodeDeploy deployment..."
        echo "Application: ${PROJECT_NAME}-app"
        echo "Deployment Group: ${PROJECT_NAME}-deployment-group"
        echo "S3 Location: s3://${S3_BUCKET}/github-builds/${{ needs.build.outputs.artifact-name }}"
        
        # Create deployment
        DEPLOYMENT_ID=$(aws deploy create-deployment \
          --application-name "${PROJECT_NAME}-app" \
          --deployment-group-name "${PROJECT_NAME}-deployment-group" \
          --s3-location bucket="${S3_BUCKET}",key="github-builds/${{ needs.build.outputs.artifact-name }}",bundleType=zip \
          --description "GitHub Actions deployment #${{ github.run_number }} from commit ${{ github.sha }}" \
          --query 'deploymentId' --output text)
        
        echo "Deployment started with ID: ${DEPLOYMENT_ID}"
        echo "deployment-id=${DEPLOYMENT_ID}" >> $GITHUB_OUTPUT
        
        # Wait for deployment to complete
        echo "Waiting for deployment to complete..."
        aws deploy wait deployment-successful --deployment-id "${DEPLOYMENT_ID}"
        
        echo "‚úÖ Deployment completed successfully!"
    
    - name: Get deployment status
      run: |
        # Get deployment details
        aws deploy get-deployment --deployment-id "${{ steps.deploy.outputs.deployment-id }}" \
          --query 'deploymentInfo.[status,description,completeTime]' --output table
        
        echo "üéâ GitHub Actions CI/CD pipeline completed!"

  verify-deployment:
    name: Verify Deployment
    needs: [deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get EC2 instance info
      id: ec2-info
      run: |
        # Get EC2 instance public IP
        PUBLIC_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Environment,Values=Development" "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        
        echo "ec2-ip=${PUBLIC_IP}" >> $GITHUB_OUTPUT
        echo "EC2 Instance Public IP: ${PUBLIC_IP}"
    
    - name: Health check
      run: |
        EC2_IP="${{ steps.ec2-info.outputs.ec2-ip }}"
        
        if [ "${EC2_IP}" != "None" ] && [ -n "${EC2_IP}" ]; then
          echo "Performing health check on http://${EC2_IP}:3000/health"
          
          # Wait a bit for application to fully start
          sleep 10
          
          # Health check with retry
          for i in {1..5}; do
            echo "Health check attempt ${i}/5..."
            if curl -f -s "http://${EC2_IP}:3000/health" > /dev/null; then
              echo "‚úÖ Health check passed!"
              
              # Get detailed health info
              echo "Application health status:"
              curl -s "http://${EC2_IP}:3000/health" | jq '.'
              
              echo "Application URL: http://${EC2_IP}:3000"
              break
            else
              echo "‚ö†Ô∏è Health check failed, retrying in 10 seconds..."
              sleep 10
            fi
            
            if [ $i -eq 5 ]; then
              echo "‚ùå Health check failed after 5 attempts"
              exit 1
            fi
          done
        else
          echo "‚ùå Could not retrieve EC2 instance IP"
          exit 1
        fi
